cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
#set(ROS_BUILD_TYPE RelWithDebInfo)

rosbuild_init()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

#uncomment if you have defined messages
#rosbuild_genmsg()
#uncomment if you have defined services
rosbuild_gensrv()

#common commands for building c++ executables and libraries
#rosbuild_add_library(${PROJECT_NAME} src/example.cpp)
#target_link_libraries(${PROJECT_NAME} another_library)
#rosbuild_add_boost_directories()
#rosbuild_link_boost(${PROJECT_NAME} thread)
#rosbuild_add_executable(example examples/example.cpp)
#target_link_libraries(example ${PROJECT_NAME})

SET(CMAKE_BUILD_TYPE Release)
SET(RW_ROOT "$ENV{RW_ROOT}")
SET(RWSTUDIO_ROOT "$ENV{RWS_ROOT}")
SET(RWHW_ROOT "$ENV{RWHW_ROOT}")

#Include default settings for constructing a robwork dependent project
#INCLUDE(${RW_ROOT}/build/FindRobWork.cmake)
#FIND_PACKAGE(RobWork QUIET HINTS "${RW_ROOT}")
FIND_PACKAGE(
  RobWork
  QUIET
  HINTS
    "${RW_ROOT}")
#Include default settings for constructing a robworkstudio dependent project
#INCLUDE(${RWSTUDIO_ROOT}/build/FindRobWorkStudio.cmake)
#FIND_PACKAGE(RobWorkStudio QUIET HINTS "${RWSTUDIO_ROOT}")
FIND_PACKAGE(
  RobWorkStudio
  QUIET
  HINTS
    "${RWSTUDIO_ROOT}")
#For robworkhardware
SET(CMAKE_MODULE_PATH ${RWHW_ROOT}/build ${CMAKE_MODULE_PATH})
FIND_PACKAGE(RobWorkHardware REQUIRED netft)

find_package(
  CoViS
  REQUIRED
  HINTS
  $ENV{HOME}/CoViS $ENV{HOME}/Code/CoViS $ENV{HOME}/workspace/CoViS ../../../CoViS
  $ENV{HOME}/covis $ENV{HOME}/Code/covis $ENV{HOME}/workspace/covis ../../../covis
  )
  
if(NOT CoViS_FOUND)
  message(FATAL_ERROR "CoViS NOT found! You should append a proper hint path for the CoViS directory tree inside pose_estimation_new/CMakeLists.txt")
endif()

include_directories(${COVIS_INCLUDE_DIR})
link_directories(${COVIS_LIBRARY_DIRS})
add_definitions(${COVIS_CXX_FLAGS})

INCLUDE_DIRECTORIES( ${ROBWORK_INCLUDE_DIRS}
                     ${ROBWORKSTUDIO_INCLUDE_DIRS}
                     ${ROBWORKHARDWARE_INCLUDE_DIRS})

LINK_DIRECTORIES( ${ROBWORK_LIBRARY_DIRS}
                  ${ROBWORKSTUDIO_LIBRARY_DIRS}
                  ${ROBWORKHARDWARE_LIBRARY_DIRS})

#########################
#From here we add the plugins
SET(UIS_FILES interface.ui)
RWS_QT4_WRAP_UI(UIS_OUT_H ${UIS_FILES})
SET(SrcFiles calibration_verify.cpp ${UIS_OUT_H})

QT4_WRAP_CPP(MocSrcFiles calibration_verify.hpp)
QT4_ADD_RESOURCES(RccSrcFiles resources.qrc)

set(ROS_BUILD_STATIC_LIBS false)
set(ROS_BUILD_SHARED_LIBS true)

#rosbuild_add_executable(calibration_verify src/calibration_verify.cpp)
rosbuild_add_library(calibration_verify ${SrcFiles} ${MocSrcFiles} ${RccSrcFiles})
target_link_libraries(calibration_verify ${ROBWORK_LIBRARIES} ${ROBWORKSTUDIO_LIBRARIES} ${ROBWORKHARDWARE_LIBRARIES} ${OpenCV_LIBS} ${COVIS_LIBRARIES} rw_sandbox)

rosbuild_add_executable(stereo_chessboard_detector src/stereo_chessboard_detector.cpp)
TARGET_LINK_LIBRARIES(stereo_chessboard_detector ${OpenCV_LIBS} ${COVIS_LIBRARIES})

rosbuild_add_executable(kinect_chessboard_detector src/kinect_chessboard_detector.cpp)
TARGET_LINK_LIBRARIES(kinect_chessboard_detector ${OpenCV_LIBS} ${COVIS_LIBRARIES})
